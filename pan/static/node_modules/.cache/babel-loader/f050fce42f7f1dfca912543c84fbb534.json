{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'MainApp',\n  props: {},\n  computed: {\n    lpains() {\n      const elems = Object.entries(this.pains);\n      return Object.fromEntries(elems.filter(pain => pain[1].status == 'emitter'));\n    }\n\n  },\n\n  mounted() {\n    axios.get('/api/config').then(response => this.pains = response.data);\n  },\n\n  methods: {\n    save() {\n      for (let pain in this.pains) {\n        // Emitters should have their own ip as remote_ip\n        if (pain.status == 'emitter') {\n          pain.remote_ip = pain.ip;\n        }\n      }\n\n      axios.post('api/config', this.pains).then(data => console.log(data));\n    },\n\n    setIp(event) {\n      const value = event.target.value;\n      const origpai = event.target.data.origpai;\n      console.log(value);\n      console.log(origpai);\n    }\n\n  },\n\n  data() {\n    return {\n      pains: []\n    };\n  }\n\n};","map":{"version":3,"mappings":"AAwBA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe;AACbC,MAAI,EAAE,SADO;AAEbC,OAAK,EAAE,EAFM;AAIbC,UAAQ,EAAE;AACRC,UAAM,GAAE;AACN,YAAMC,KAAI,GAAIC,MAAM,CAACC,OAAP,CAAe,KAAKC,KAApB,CAAd;AACA,aAAOF,MAAM,CAACG,WAAP,CAAmBJ,KAAK,CAACK,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAAC,CAAD,CAAJ,CAAQC,MAAR,IAAkB,SAAzC,CAAnB,CAAP;AACF;;AAJQ,GAJG;;AAUbC,SAAM,GAAK;AACTb,SAAI,CACDc,GADH,CACO,aADP,EAEGC,IAFH,CAEQC,QAAO,IAAM,KAAKR,KAAL,GAAaQ,QAAQ,CAACC,IAF3C;AAGD,GAdY;;AAebC,SAAO,EAAE;AACPC,QAAI,GAAG;AACL,WAAK,IAAIR,IAAT,IAAiB,KAAKH,KAAtB,EAA6B;AAC3B;AACA,YAAIG,IAAI,CAACC,MAAL,IAAe,SAAnB,EAA8B;AAC5BD,cAAI,CAACS,SAAL,GAAiBT,IAAI,CAACU,EAAtB;AACF;AACF;;AACArB,WAAK,CAACsB,IAAN,CAAW,YAAX,EAAyB,KAAKd,KAA9B,EAAqCO,IAArC,CAA0CE,IAAG,IAAKM,OAAO,CAACC,GAAR,CAAYP,IAAZ,CAAlD;AACD,KATM;;AAUPQ,SAAK,CAACC,KAAD,EAAQ;AACX,YAAMC,KAAI,GAAID,KAAK,CAACE,MAAN,CAAaD,KAA3B;AACA,YAAME,OAAM,GAAIH,KAAK,CAACE,MAAN,CAAaX,IAAb,CAAkBY,OAAlC;AACAN,aAAO,CAACC,GAAR,CAAYG,KAAZ;AACAJ,aAAO,CAACC,GAAR,CAAYK,OAAZ;AACF;;AAfO,GAfI;;AAgCbZ,MAAG,GAAK;AACN,WAAO;AACLT,WAAK,EAAE;AADF,KAAP;AAGF;;AApCa,CAAf","names":["axios","name","props","computed","lpains","elems","Object","entries","pains","fromEntries","filter","pain","status","mounted","get","then","response","data","methods","save","remote_ip","ip","post","console","log","setIp","event","value","target","origpai"],"sourceRoot":"","sources":["/home/dfrancos/devel/personal/pan/pan/static/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div v-for=\"(pai, key) in pains\" v-bind:key=\"pai.ip\">\n    <div :id=pai.ip>\n      <h2>{{key}}</h2>\n      <select v-model=pai.status>\n        <option value=disabled>Desactivado</option>\n        <option value=emitter>Origen</option>\n        <option value=receiver>Altavoz</option>\n      </select>\n      <div v-if=\"pai.status=='receiver'\">\n          <select v-on:change=setIp>\n            <option data-origpai=pai.ip\n                    v-for=\"(lpai, lkey) in lpains\"\n                    v-bind:key=lpai.ip value=lpai.ip>\n              {{lkey}}\n            </option>\n          </select>\n      </div>\n    </div>\n  </div>\n  <button @click=save>Guardar</button>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'MainApp',\n  props: {\n  },\n  computed: {\n    lpains(){\n      const elems = Object.entries(this.pains)\n      return Object.fromEntries(elems.filter((pain) => pain[1].status == 'emitter'));\n    }\n  },\n  mounted () {\n    axios\n      .get('/api/config')\n      .then(response => (this.pains = response.data))\n  },\n  methods: {\n    save() {\n      for (let pain in this.pains) {\n        // Emitters should have their own ip as remote_ip\n        if (pain.status == 'emitter') {\n          pain.remote_ip = pain.ip\n        }\n      }\n      axios.post('api/config', this.pains).then(data => console.log(data));\n    },\n    setIp(event) {\n      const value = event.target.value;\n      const origpai = event.target.data.origpai;\n      console.log(value);\n      console.log(origpai);\n    }\n  },\n  data () {\n    return {\n      pains: []\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}